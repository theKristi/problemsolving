{"version":3,"sources":["Solution.js","NavBar.js","Problem.js","App.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","bootstrap_dist_css_bootstrap_min_css__WEBPACK_IMPORTED_MODULE_1__","bootstrap_dist_css_bootstrap_min_css__WEBPACK_IMPORTED_MODULE_1___default","Solution","_ref","problem","ExecuteSolution","solution","inputs","map","input","index","concat","join","console","log","init","answer","eval","a","createElement","className","Navbar","react_default","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Problem","this","props","problemStatement","Component","Next","displayNextProblem","hasNext","onClick","Previous","_ref2","displayPreviousProblem","hasPrev","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","problemDisplayed","problems","problemIndex","displayProblemAtIndex","bind","assertThisInitialized","setState","Prism","highlightAll","newIndex","NavBar","src_Problem","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App","output","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.561939f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nfunction Solution ({problem}){\r\n\r\n    let ExecuteSolution=(problem)=>{\r\n        let solution=problem.inputs.map((input, index)=>{return `let input${index}=${input};`}).join(\"\");\r\n   \r\n        console.log(solution);\r\n        solution+=\"\\n\"+problem.solution;\r\n        solution+=problem.init;\r\n        let answer=eval(solution);\r\n        console.log(answer);\r\n        return answer;\r\n      }\r\n    return <div className=\"col-6\">\r\n                <p>Input: {problem.inputs}</p>\r\n                <p>Output: {ExecuteSolution(problem)}</p>\r\n           </div>\r\n    \r\n    \r\n\r\n}\r\nexport default Solution;","import React from 'react'\r\n\r\n    function Navbar() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-xl navbar-dark bg-dark\">\r\n                <a className=\"navbar-brand\" href=\"#\">Kristi_the_coder</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExample06\" aria-controls=\"navbarsExample06\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n      \r\n                <div className=\"collapse navbar-collapse\" id=\"navbarcollapse\">\r\n              <ul className=\"navbar-nav mr-auto\">\r\n                \r\n               \r\n              </ul>\r\n             \r\n            </div>\r\n          </nav> \r\n        );\r\n    }\r\n\r\nexport default Navbar;","import React,{Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Prism from \"prismjs\";\r\nimport \"./prism.css\";\r\nclass Problem extends Component{\r\n   \r\n    \r\n    render(){\r\n   \r\n    return <div className=\"col-6\">\r\n                <p>{this.props.problem.problemStatement}</p>\r\n                <pre>\r\n                <code className=\"language-javascript\">\r\n                {\r\n                    this.props.problem.solution\r\n                }\r\n                </code>\r\n            </pre>\r\n           </div>\r\n}\r\n}\r\nexport default Problem;\r\n","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navbar from './NavBar';\r\nimport Problem from './Problem';\r\nimport Solution from './Solution';\r\nimport Prism from \"prismjs\";\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n    problemDisplayed:props.problems[0],\r\n    problemIndex:0\r\n    }\r\n    this.displayProblemAtIndex=this.displayProblemAtIndex.bind(this);\r\n    this.displayNextProblem=this.displayNextProblem.bind(this);\r\n    this.displayPreviousProblem=this.displayPreviousProblem.bind(this);\r\n}\r\n displayProblemAtIndex(index){\r\n   //console.log(index);\r\n   this.setState({\r\n     problemDisplayed: this.props.problems[index],\r\n     problemIndex:index\r\n  });\r\n\r\n }\r\n componentDidUpdate(){\r\n\r\n   Prism.highlightAll();\r\n }\r\n displayNextProblem(){\r\n   let newIndex= this.state.problemIndex+1;\r\n   //console.log(\"new:\"+newIndex)\r\n   this.displayProblemAtIndex(newIndex)\r\n }\r\n displayPreviousProblem(){\r\n  let newIndex= this.state.problemIndex-1;\r\n  //console.log(\"new:\"+newIndex)\r\n  this.displayProblemAtIndex(newIndex)\r\n}\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <Problem problem={this.state.problemDisplayed} />\r\n        <Solution problem={this.state.problemDisplayed}/>\r\n        <Next displayNextProblem={this.displayNextProblem} hasNext={this.state.problemIndex<this.props.problems.length-1}/>\r\n        <Previous displayPreviousProblem={this.displayPreviousProblem} hasPrev={this.state.problemIndex>0}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction Next({displayNextProblem, hasNext}){\r\n  return hasNext? <div className=\"col-11\">\r\n  <button className=\"btn btn-primary btn-lg float-right\" onClick={displayNextProblem}>Next</button>\r\n</div>:null\r\n}\r\nfunction Previous({displayPreviousProblem, hasPrev}){\r\n  return hasPrev? <div className=\"col-11\">\r\n  <button className=\"btn btn-primary btn-lg float-left\" onClick={displayPreviousProblem}>Previous</button>\r\n</div>:null\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nlet problems=[\r\n    {\r\n    problemStatement:`Find maximum consecutive repeating character in string\r\n     Input : str = \"aaaaaabbcbbbbbcbbbb\" \r\n     Output: a`,\r\n    solution:`function findMaxRepeatingChar(input0){\r\n    let maxChar;\r\n    let curChar;\r\n    let lastChar;\r\n    let maxCount=0;\r\n    let curCount=0;\r\n    for(let i=0;i<input0.length;i++){\r\n        curChar=input0[i]\r\n        if(!maxChar)\r\n            maxChar=curChar;\r\n                \r\n        if(curChar===lastChar||!lastChar){    \r\n            curCount++;\r\n                \r\n        }\r\n        else{\r\n            curCount=0;\r\n        }   \r\n        if(curCount>maxCount){\r\n            maxChar=curChar;\r\n            maxCount=curCount;\r\n        }\r\n                lastChar=curChar;\r\n    }\r\n        return maxChar;\r\n}`,\r\n    inputs:['\"aaaaaabbcbbbbbcbbbb\"'],\r\n    output:'a',\r\n    init:'findMaxRepeatingChar(input0)'\r\n    },\r\n    {\r\n        problemStatement:`Merge two sorted arrays into one sorted array\r\n        int[] A = {1,5,7,12,18,32}\r\n        \r\n        int[] B = {2,4,9,16,27,76,98}`,\r\n        solution:`function mergeArrays(input0, input1){\r\n            let merged = [];\r\n            let index1 = 0;\r\n            let index2 = 0;\r\n            let current = 0;\r\n          \r\n            while (current < (input0.length + input1.length)) {\r\n          \r\n              let isInput0Depleted = index1 >= input0.length;\r\n              let isInput1Depleted = index2 >= input1.length;\r\n          \r\n              if (!isInput0Depleted && (isInput1Depleted || (input0[index1] < input1[index2]))) {\r\n                merged[current] = input0[index1];\r\n                index1++;\r\n              } else {\r\n                merged[current] = input1[index2];\r\n                index2++;\r\n              }\r\n          \r\n              current++;\r\n            }\r\n          \r\n            return merged.toString();\r\n        }`,\r\n        inputs:['[1,5,7,12,18,32]','[2,4,9,16,27,76,98]'],\r\n        init:'mergeArrays(input0, input1)'\r\n    },\r\n    {\r\n        problemStatement: \" Segregate 0s on left side and 1s on right side of the array. Traverse array only once.\",\r\n        solution:`function seperateNegPos(input0){\r\n            let left = 0, right = input0.length-1; \r\n          \r\n            while (left < right) \r\n            { \r\n                /* Increment left index while we see 0 at left */\r\n                while (input0[left] > 0 && left < right) \r\n                    left++; \r\n          \r\n                /* Decrement right index while we see 1 at right */\r\n                while (input0[right] < 1 && left < right) \r\n                    right--; \r\n          \r\n                /* If left is smaller than right then there is a 1 at left \r\n                  and a 0 at right.  Exchange arr[left] and arr[right]*/\r\n                if (left < right) \r\n                { let swap=input0[left]\r\n                    input0[left] = input0[right]; \r\n                    input0[right] = swap; \r\n                    left++; \r\n                    right--; \r\n                } \r\n             \r\n            }\r\n            return input0.reverse().toString(); \r\n        }`,\r\n        inputs:['[4,-3,2,-5,5,-1,3]'],\r\n        init:'seperateNegPos(input0)'\r\n    },\r\n    {\r\n        problemStatement: \" Segregate 0s on left side and 1s on right side of the array. Traverse array only once.\",\r\n        solution:`function seperate10(input0){\r\n            /* Initialize left and right indexes */\r\n            let left = 0, right = input0.length-1; \r\n          \r\n            while (left < right) \r\n            { \r\n                /* Increment left index while we see 0 at left */\r\n                while (input0[left] == 0 && left < right) \r\n                    left++; \r\n          \r\n                /* Decrement right index while we see 1 at right */\r\n                while (input0[right] == 1 && left < right) \r\n                    right--; \r\n          \r\n                /* If left is smaller than right then there is a 1 at left \r\n                  and a 0 at right.  Exchange arr[left] and arr[right]*/\r\n                if (left < right) \r\n                { \r\n                    input0[left] = 0; \r\n                    input0[right] = 1; \r\n                    left++; \r\n                    right--; \r\n                } \r\n            }\r\n            return input0.toString(); \r\n        }`,\r\n        inputs:['[0,1,0,1,0,0,1,1,1,0]'],\r\n        init:'seperate10(input0)'\r\n    }\r\n]\r\nReactDOM.render(<App problems={problems}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}